
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Text.Json;
using GameFrameX.Core.Config;

namespace GameFrameX.Config.Tables
{
    public sealed partial class ItemConfig : BeanBase
    {
        /*
        public ItemConfig(int Id, string Name, ItemType Type, ItemSubType SubType, ItemEPrompt EPrompt, ItemCanUse CanUse, bool IsDecompose, int MaxNum, string Description, System.Collections.Generic.List<int> ComeLink, string Icon, string BgIcon, ItemLevelColor LevelColor, bool CanAnnounce, string LinkInfo, int FunctionID, ItemUseLimiteType UseLimiteType, bool Abandon, bool DoubleCheckDesc, bool CanTrade, int TradeCD, int TradeItemsLimit, int UseLinmit, long? ExpireTime, bool IsRecordLog) 
        {
            this.Id = Id;
            this.Name = Name;
            this.Type = Type;
            this.SubType = SubType;
            this.EPrompt = EPrompt;
            this.CanUse = CanUse;
            this.IsDecompose = IsDecompose;
            this.MaxNum = MaxNum;
            this.Description = Description;
            this.ComeLink = ComeLink;
            this.Icon = Icon;
            this.BgIcon = BgIcon;
            this.LevelColor = LevelColor;
            this.CanAnnounce = CanAnnounce;
            this.LinkInfo = LinkInfo;
            this.FunctionID = FunctionID;
            this.UseLimiteType = UseLimiteType;
            this.Abandon = Abandon;
            this.DoubleCheckDesc = DoubleCheckDesc;
            this.CanTrade = CanTrade;
            this.TradeCD = TradeCD;
            this.TradeItemsLimit = TradeItemsLimit;
            this.UseLinmit = UseLinmit;
            this.ExpireTime = ExpireTime;
            this.IsRecordLog = IsRecordLog;
            PostInit();
        }        
        */

        public ItemConfig(JsonElement _buf) 
        {
            Id = _buf.GetProperty("id").GetInt32();
            Name = _buf.GetProperty("Name").GetString();
            Type = (ItemType)_buf.GetProperty("Type").GetInt32();
            SubType = (ItemSubType)_buf.GetProperty("SubType").GetInt32();
            EPrompt = (ItemEPrompt)_buf.GetProperty("EPrompt").GetInt32();
            CanUse = (ItemCanUse)_buf.GetProperty("CanUse").GetInt32();
            IsDecompose = _buf.GetProperty("IsDecompose").GetBoolean();
            MaxNum = _buf.GetProperty("MaxNum").GetInt32();
            Description = _buf.GetProperty("description").GetString();
            { var __json0 = _buf.GetProperty("ComeLink"); ComeLink = new System.Collections.Generic.List<int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  ComeLink.Add(__v0); }   }
            Icon = _buf.GetProperty("Icon").GetString();
            BgIcon = _buf.GetProperty("BgIcon").GetString();
            LevelColor = (ItemLevelColor)_buf.GetProperty("LevelColor").GetInt32();
            CanAnnounce = _buf.GetProperty("CanAnnounce").GetBoolean();
            LinkInfo = _buf.GetProperty("LinkInfo").GetString();
            FunctionID = _buf.GetProperty("FunctionID").GetInt32();
            UseLimiteType = (ItemUseLimiteType)_buf.GetProperty("UseLimiteType").GetInt32();
            Abandon = _buf.GetProperty("Abandon").GetBoolean();
            DoubleCheckDesc = _buf.GetProperty("doubleCheckDesc").GetBoolean();
            CanTrade = _buf.GetProperty("CanTrade").GetBoolean();
            TradeCD = _buf.GetProperty("TradeCD").GetInt32();
            TradeItemsLimit = _buf.GetProperty("TradeItemsLimit").GetInt32();
            UseLinmit = _buf.GetProperty("UseLinmit").GetInt32();
            {if (_buf.TryGetProperty("ExpireTime", out var _j) && _j.ValueKind != JsonValueKind.Null) { ExpireTime = _j.GetInt64(); } else { ExpireTime = null; } }
            IsRecordLog = _buf.GetProperty("IsRecordLog").GetBoolean();
        }
    
        public static ItemConfig DeserializeItemConfig(JsonElement _buf)
        {
            return new Tables.ItemConfig(_buf);
        }

        /// <summary>
        /// ID
        /// </summary>
        public int Id { private set; get; }
        public string Name { private set; get; }
        /// <summary>
        /// 道具类型
        /// </summary>
        public ItemType Type { private set; get; }
        /// <summary>
        /// 子类别
        /// </summary>
        public ItemSubType SubType { private set; get; }
        /// <summary>
        /// 是否提示使用
        /// </summary>
        public ItemEPrompt EPrompt { private set; get; }
        /// <summary>
        /// 能否使用
        /// </summary>
        public ItemCanUse CanUse { private set; get; }
        /// <summary>
        /// 是否可分解
        /// </summary>
        public bool IsDecompose { private set; get; }
        /// <summary>
        /// 叠加数
        /// </summary>
        public int MaxNum { private set; get; }
        /// <summary>
        /// 描述信息
        /// </summary>
        public string Description { private set; get; }
        /// <summary>
        /// 来源链接
        /// </summary>
        public System.Collections.Generic.List<int> ComeLink { private set; get; }
        /// <summary>
        /// 图标链接
        /// </summary>
        public string Icon { private set; get; }
        /// <summary>
        /// 背景图链接
        /// </summary>
        public string BgIcon { private set; get; }
        /// <summary>
        /// 颜色品级
        /// </summary>
        public ItemLevelColor LevelColor { private set; get; }
        /// <summary>
        /// 是否公告
        /// </summary>
        public bool CanAnnounce { private set; get; }
        /// <summary>
        /// 点击使用后<br/>跳转位置
        /// </summary>
        public string LinkInfo { private set; get; }
        /// <summary>
        /// 关联的功能序号
        /// </summary>
        public int FunctionID { private set; get; }
        /// <summary>
        /// 使用限制类别
        /// </summary>
        public ItemUseLimiteType UseLimiteType { private set; get; }
        /// <summary>
        /// 是否废弃
        /// </summary>
        public bool Abandon { private set; get; }
        /// <summary>
        /// 使用时需要弹窗二次确认的描述
        /// </summary>
        public bool DoubleCheckDesc { private set; get; }
        /// <summary>
        /// 能否交换
        /// </summary>
        public bool CanTrade { private set; get; }
        /// <summary>
        /// 交换冷却CD<br/>
        /// </summary>
        public int TradeCD { private set; get; }
        /// <summary>
        /// 赠送数量限制
        /// </summary>
        public int TradeItemsLimit { private set; get; }
        /// <summary>
        /// 可使用总次数
        /// </summary>
        public int UseLinmit { private set; get; }
        /// <summary>
        /// 到期时间
        /// </summary>
        public long? ExpireTime { private set; get; }
        /// <summary>
        /// 是否记录日志
        /// </summary>
        public bool IsRecordLog { private set; get; }

        private const int __ID__ = -1046574242;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef(TablesComponent tables)
        {
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }

        public override string ToString()
        {
            return "{ "
            + "id:" + Id + ","
            + "Name:" + Name + ","
            + "Type:" + Type + ","
            + "SubType:" + SubType + ","
            + "EPrompt:" + EPrompt + ","
            + "CanUse:" + CanUse + ","
            + "IsDecompose:" + IsDecompose + ","
            + "MaxNum:" + MaxNum + ","
            + "description:" + Description + ","
            + "ComeLink:" + StringUtil.CollectionToString(ComeLink) + ","
            + "Icon:" + Icon + ","
            + "BgIcon:" + BgIcon + ","
            + "LevelColor:" + LevelColor + ","
            + "CanAnnounce:" + CanAnnounce + ","
            + "LinkInfo:" + LinkInfo + ","
            + "FunctionID:" + FunctionID + ","
            + "UseLimiteType:" + UseLimiteType + ","
            + "Abandon:" + Abandon + ","
            + "doubleCheckDesc:" + DoubleCheckDesc + ","
            + "CanTrade:" + CanTrade + ","
            + "TradeCD:" + TradeCD + ","
            + "TradeItemsLimit:" + TradeItemsLimit + ","
            + "UseLinmit:" + UseLinmit + ","
            + "ExpireTime:" + ExpireTime + ","
            + "IsRecordLog:" + IsRecordLog + ","
            + "}";
        }

        partial void PostInit();
    }
}
