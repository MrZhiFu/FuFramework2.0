// <auto-generated>
//	本代码由FGUI插件CSharpAPIGen自动生成. 切记不可手动更改!
// </auto-generated>
// ReSharper disable once CheckNamespace 禁用命名空间检查

using System;
using FairyGUI;
using FairyGUI.Utils;
using GameFrameX.Runtime;
using FuFramework.UI.Runtime;
using GameFrameX.Event.Runtime;

namespace Hotfix.UI.View.Bag
{
    public partial class CompGoodItem : GButton, ICustomComp
    {
		public const string URL = "ui://a3awyna772ce2u";

		private enum Ebutton
		{
			Up = 2,
			Down = 3,
		}

		private void SetController(Ebutton ebutton) => button.SetSelectedIndex((int) ebutton);

		private Controller button;
		private GLoader loaderBg;
		private GLoader loaderGift;
		private GTextField txtNum;

        /// 组件所属界面
        private ViewBase uiView;
        
        public override void ConstructFromXML(XML xml)
        {
            base.ConstructFromXML(xml);
            InitUIComp();
        }
        
        /// <summary>
        /// UI组件初始化
        /// </summary>
        public void InitUIComp()
        {
			button = GetController("button");
			loaderBg = (GLoader)GetChild("_loaderBg");
			loaderGift = (GLoader)GetChild("_loaderGift");
			txtNum = (GTextField)GetChild("_txtNum");


        }
        
        /// <summary>
        /// UI组件事件初始化
        /// </summary>
        public void InitUIEvent()
        {

        }

        /// <summary>
        /// UI组件销毁
        /// </summary>
        public override void Dispose()
        {
            Log.Info($"销毁{uiView.UIName}界面组件-{GetType().Name}");
            uiView = null;
            base.Dispose();
        }

        /// <summary>
        /// 添加UI上指定组件的监听事件
        /// </summary>
        /// <param name="listener">监听者</param>
        /// <param name="callback">回调函数</param>
        protected void AddUIListener(EventListener listener, EventCallback1 callback) => uiView.AddUIListener(listener, callback);

        /// <summary>
        /// 设置UI上指定组件的监听事件(会删除以前添加的事件)
        /// </summary>
        /// <param name="listener">被监听者(一般是交互组件，如Button)</param>
        /// <param name="callback">回调函数</param>
        protected void SetUIListener(EventListener listener, EventCallback1 callback) => uiView.SetUIListener(listener, callback);

        /// <summary>
        /// 移除UI上指定组件的监听事件
        /// </summary>
        /// <param name="listener">被监听者(一般是交互组件，如Button)</param>
        /// <param name="callback">回调函数</param>
        protected void RemoveUIListener(EventListener listener, EventCallback1 callback) => uiView.RemoveUIListener(listener, callback);
        
        /// <summary>
        /// 清理UI上指定组件的所有监听事件
        /// </summary>
        /// <param name="listener">被监听者(一般是交互组件，如Button)</param>
        protected void ClearUIListener(EventListener listener) => uiView.ClearUIListener(listener);

        /// <summary>
        /// 清理UI上所有组件的所有监听事件
        /// </summary>
        protected void ClearAllUIListener() => uiView.ClearAllUIListener();

        
        /// <summary>
        /// 订阅事件
        /// </summary>
        /// <param name="eventId">消息ID</param>
        /// <param name="handler">处理对象</param>
        protected void Subscribe(string eventId, EventHandler<GameEventArgs> handler) => uiView.Subscribe(eventId, handler);

        /// <summary>
        /// 取消订阅事件
        /// </summary>
        /// <param name="eventId">消息ID</param>
        /// <param name="handler">处理对象</param>
        protected void UnSubscribe(string eventId, EventHandler<GameEventArgs> handler) => uiView.UnSubscribe(eventId, handler);

        /// <summary>
        /// 触发事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
        /// </summary>
        /// <param name="eventId">消息ID</param>
        /// <param name="e">消息对象</param>
        protected void Fire(string eventId, GameEventArgs e) => uiView.Fire(eventId, e);

        /// <summary>
        /// 抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。
        /// </summary>
        /// <param name="sender">事件发送者。</param>
        /// <param name="eventId">事件编号。</param>
        protected void Fire(object sender, string eventId) => uiView.Fire(sender, eventId);

        /// <summary>
        /// 抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。
        /// </summary>
        /// <param name="sender">事件发送者。</param>
        /// <param name="e">事件内容。</param>
        protected void FireNow(object sender, GameEventArgs e) =>  uiView.FireNow(sender, e);

        /// <summary>
        /// 取消所有订阅
        /// </summary>
        protected void UnSubscribeAll() => uiView.UnSubscribeAll();


        /// <summary>
        /// 添加一个定时调用的任务
        /// </summary>
        /// <param name="interval">间隔时间（以秒为单位）</param>
        /// <param name="repeat">重复次数（0 表示无限重复）</param>
        /// <param name="callback">要执行的回调函数</param>
        /// <param name="callbackParam">回调函数的参数（可选）</param>
        protected void AddTimer(float interval, int repeat, Action<object> callback, object callbackParam = null)
            => uiView.AddTimer(interval, repeat,callback, callbackParam);

        /// <summary>
        /// 添加一个只执行一次的任务
        /// </summary>
        /// <param name="interval">间隔时间（以秒为单位）</param>
        /// <param name="callback">要执行的回调函数</param>
        /// <param name="callbackParam">回调函数的参数（可选）</param>
        protected void AddTimerOnce(float interval, Action<object> callback, object callbackParam = null) 
            => uiView.AddTimerOnce(interval, callback, callbackParam);

        /// <summary>
        /// 添加一个每帧更新执行的任务
        /// </summary>
        /// <param name="callback">要执行的回调函数</param>
        /// <param name="callbackParam">回调函数的参数</param>
        protected void AddTimerUpdate(Action<object> callback, object callbackParam = null) 
            => uiView.AddTimerUpdate(callback, callbackParam);

        /// <summary>
        /// 移除指定的任务
        /// </summary>
        /// <param name="callback">要移除的回调函数</param>
        protected void RemoveTimer(Action<object> callback) => uiView.RemoveTimer(callback);
 
        /// <summary>
        /// 移除所有计时任务
        /// </summary>
        protected void RemoveAllTimer() => uiView.RemoveAllTimer();
    }
}
